--Проверяем наличие таблиц в схеме 'production'
select tablename
from pg_catalog.pg_tables
where schemaname  = 'production';

-- изучим структуру таблицы "orders"
SELECT order_id, order_ts, user_id, bonus_payment, payment, "cost", bonus_grant, status
FROM production.orders;

--Определение дублей
SELECT count(order_id) as total,
count (distinct order_id) as uniq
FROM production.orders;

-- поиск пропущенных значений

select *
from production.orders
where order_id is null 
or order_ts is null 
or user_id is null 
or payment is null 
or status is null;

-- создадим представления для таблиц из базы production

create view analysis.v_orderitems as
select * from production.orderitems;

create view analysis.v_orders as
select * from production.orders;

create view analysis.v_orderstatuses as
select * from production.orderstatuses;

create view analysis.v_orderstatuslog as
select * from production.orderstatuslog;

create view analysis.v_products as
select * from production.products; 

create view analysis.v_users as
select * from production.users; 


--Напишите DDL-запрос для создания витрины

drop table analysis.dm_rfm_segments 

CREATE table IF NOT EXISTS  analysis.dm_rfm_segments 
(
	user_id integer not null,
	recency  integer not null CHECK (recency between 1 and 5),
	frequency integer not null CHECK (frequency between 1 and 5),
	monetary_value integer not null CHECK (frequency between 1 and 5)
);



insert into analysis.dm_rfm_segments (
user_id, 
  recency,
  frequency,
  monetary_value
)
--первое решение
/*with recency_ex as (
select 
user_id,
max(order_ts),
EXTRACT(DAY from now()-max(order_ts)) AS DateDifference
from analysis.v_orders
where status = 4 -- Closed
group by 1
order by 1 desc), 
recency as (
select user_id,
  case when row_n < 200 then 1
	when row_n between 200 and 399 then 2
	when row_n between 400 and 599 then 3
	when row_n between 600 and 799 then 4
	else 5 end as recency
from
(
select *,
ROW_NUMBER () OVER (
      order BY datedifference) as row_n
  from recency_ex) t),
  frequency_ex as 
  (
  select
 user_id,
count(order_id) as cnt_order
from analysis.v_orders
where status = 4 -- Closed
group by 1
  ),
   frequency as (
select user_id,
  case when row_n_fr < 200 then 1
	when row_n_fr between 200 and 399 then 2
	when row_n_fr between 400 and 599 then 3
	when row_n_fr between 600 and 799 then 4
	else 5 end as frequency
from
(
select *,
ROW_NUMBER () OVER (
      order BY cnt_order) as row_n_fr
  from frequency_ex) f),
   monetary_ex as 
   (
   select
 user_id,
sum(payment) as total
from analysis.v_orders
where status = 4 -- Closed
group by 1
   ), 
   monetary as (
select user_id,
  case when row_n_mon < 200 then 1
	when row_n_mon between 200 and 399 then 2
	when row_n_mon between 400 and 599 then 3
	when row_n_mon between 600 and 799 then 4
	else 5 end as monetary
from
(
select *,
ROW_NUMBER () OVER (
      order BY total) as row_n_mon
  from monetary_ex) m)
  select r.user_id, 
  recency,
  frequency,
  monetary
  from recency r
 inner join frequency f on (r.user_id = f.user_id)
 inner join monetary m on (r.user_id = m.user_id);*/



insert into analysis.dm_rfm_segments (
user_id, 
  recency,
  frequency,
  monetary_value
)
with main as (select * 
from analysis.v_orders o
left join analysis.v_users u
on (u.id=o.user_id)
where o.status = 4 -- Closed
and  status = 4 
and order_ts >= '2021-01-01'),
recency as (
select user_id, 
ntile(5) over (order by max(DateDifference) nulls first) as recency 
from (
select 
user_id,
max(order_ts),
EXTRACT(DAY from now()-max(order_ts)) AS DateDifference
from main
group by 1
order by 1 desc) t
group by 1),
frequency as (
select user_id, 
ntile(5) over (order by max(cnt_order) nulls first) as frequency 
  from (
  select
 user_id,
count(order_id) as cnt_order
from main
group by 1) m
group by 1 ),
monetary as (
select
user_id, 
ntile(5) over (order by max(total) nulls first) as monetary 
  from (
   select
 user_id,
sum(payment) as total
from main
group by 1 )e
group by 1)
 select r.user_id, 
  recency,
  frequency,
  monetary
  from recency r
 inner join frequency f on (r.user_id = f.user_id)
 inner join monetary m on (r.user_id = m.user_id); 

select * 
from analysis.dm_rfm_segments 

  
 --внести изменения в то, как формируется представление analysis.Orders
-- Значение в поле status должно соответствовать последнему по времени статусу из таблицы production.OrderStatusLog
CREATE OR REPLACE VIEW analysis.v_orders
AS
select 
o.order_id, 
o.order_ts,
o.user_id, 
o.bonus_payment,
o.payment,
o."cost",
o.bonus_grant, 
x.status_id
 from
 production.orders o
 left join 
 (select order_id, status_id
 from 
 (
 select order_id, status_id,dttm,
 row_number  () OVER (
 	partition by order_id
      order BY dttm desc) as row_dt
 from production.orderstatuslog )r
where row_dt = 1
 ) as x on (o.order_id = x.order_id)